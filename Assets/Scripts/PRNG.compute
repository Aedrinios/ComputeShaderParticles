#pragma kernel CSMain

// Particle's data
struct Particle
{
    float3 position;
    float3 velocity;
    float life;
};
RWStructuredBuffer<Particle> particleBuffer;
float deltaTime;
float2 mousePosition;

uint rng_state;

uint rand_pcg()
{
    uint state = rng_state;
    rng_state = rng_state * 747796405u + 2891336453u;
    uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;
    return (word >> 22u) ^ word;
}

[numthreads(256, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    particleBuffer[id.x].life -= deltaTime;
    float3 delta = float3(mousePosition.xy, 3) - particleBuffer[id.x].position;
    float3 dir = normalize(delta);
    particleBuffer[id.x].velocity += dir;
    particleBuffer[id.x].position += particleBuffer[id.x].velocity * deltaTime;
    
    if (particleBuffer[id.x].life < 0)
    {
        rng_state = id.x;
        float f0 = float(rand_pcg()) * (1.0 / 4294967296.0) - 0.5;
        float f1 = float(rand_pcg()) * (1.0 / 4294967296.0) - 0.5;
        float f2 = float(rand_pcg()) * (1.0 / 4294967296.0) - 0.5;
        float3 normalF3 = normalize(float3(f0, f1, f2)) * 0.8f;
        normalF3 *= float(rand_pcg()) * (1.0 / 4294967296.0);
        particleBuffer[id.x].position = float3(normalF3.x + mousePosition.x, normalF3.y + mousePosition.y, normalF3.z + 3.0);
        particleBuffer[id.x].life = 4;
        particleBuffer[id.x].velocity = float3(0, 0,0);
    }

}